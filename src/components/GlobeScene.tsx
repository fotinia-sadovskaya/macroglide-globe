import React, { useRef, useEffect } from "react";
import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
import { latLongToVector3 } from "../utils/utils";
import { exchanges } from "../data/exchanges";
import "./GlobeScene.css";

import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader";

const GlobeScene = () => {
  // üîß Ref –¥–ª—è DOM-–µ–ª–µ–º–µ–Ω—Ç–∞, –≤ —è–∫–∏–π –±—É–¥–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ WebGL canvas
  const mountRef = useRef<HTMLDivElement>(null);

  // üß† Ref –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–ª—ñ–∫—É –Ω–∞ —Ç–æ—á–∫—É (–∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –º—ñ–∂ —Ä–µ–Ω–¥–µ—Ä–∞–º–∏)
  const clickedOnDotRef = useRef(false); // üîí –ó–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞–Ω –∫–ª—ñ–∫—É –Ω–∞ —Ç–æ—á–∫—É

  useEffect(() => {
    // üß† Ref –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–ª—ñ–∫—É –Ω–∞ —Ç–æ—á–∫—É
    //clickedOnDotRef = { current: false };

    // üîÑ –ö–æ–Ω—Ç—Ä–æ–ª—å –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –≥–ª–æ–±—É—Å–∞
    let rotationPaused = false;
    const pauseRotation = () => (rotationPaused = true);
    const resumeRotation = () => (rotationPaused = false);

    // üé¨ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ü–µ–Ω–∏
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(
      75,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    camera.position.z = 3;

    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    const mountNode = mountRef.current;
    if (!mountNode) return;
    mountNode.appendChild(renderer.domElement);

    // üåç –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–ª–æ–±—É—Å–∞
    const geometry = new THREE.SphereGeometry(1, 64, 64);
    const texture = new THREE.TextureLoader().load("/earth_texture.jpeg");
    const material = new THREE.MeshStandardMaterial({ map: texture });
    const globe = new THREE.Mesh(geometry, material);
    scene.add(globe);

    // üí° –û—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
    scene.add(new THREE.AmbientLight(0xffffff, 0.5));
    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight.position.set(5, 3, 5);
    scene.add(directionalLight);

    // üéÆ –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –æ–±–µ—Ä—Ç–∞–Ω–Ω—è
    const controls = new OrbitControls(camera, renderer.domElement);

    // üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
    const loader = new GLTFLoader();
    loader.load("/models/earth.glb", (gltf) => {
      const model = gltf.scene;
      model.scale.set(1, 1, 1);
      model.position.set(0, 0, 0);
      scene.add(model);
    });

    // üìç –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ—á–æ–∫ –±—ñ—Ä–∂
    const radius = 1.01;
    exchanges.forEach((exchange) => {
      const pos = latLongToVector3(exchange.lat, exchange.lon, radius);
      const dot = new THREE.Mesh(
        new THREE.SphereGeometry(0.01, 8, 8),
        new THREE.MeshBasicMaterial({ color: 0xff00ff })
      );
      dot.position.copy(pos);
      dot.name = exchange.name;
      dot.userData = { ...exchange };

      globe.add(dot);
    });

    // üß≠ Raycaster –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –ø—ñ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();

    // üì¶ DOM-–µ–ª–µ–º–µ–Ω—Ç–∏
    const tooltip = document.getElementById("tooltip");
    const infoBox = document.getElementById("infoBox");
    if (!tooltip || !infoBox) return;

    // üñ± –ù–∞–≤–µ–¥–µ–Ω–Ω—è –º–∏—à—ñ ‚Äî –ø–æ–∫–∞–∑—É—î tooltip
    const handleMouseMove = (event: MouseEvent) => {
      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

      raycaster.setFromCamera(mouse, camera);
      const intersects = raycaster.intersectObjects(globe.children);

      if (intersects.length > 0) {
        const dot = intersects[0].object;
        tooltip.style.display = "block";
        tooltip.style.left = `${event.clientX + 10}px`;
        tooltip.style.top = `${event.clientY + 10}px`;
        tooltip.style.opacity = "1";
        tooltip.innerHTML = `
        ${
          dot.userData.logo
            ? `<img src="${dot.userData.logo}" width="20" style="vertical-align:middle;margin-right:6px;" />`
            : ""
        }
        <span>${dot.userData.name ?? "‚Äî"}</span>
      `;
        pauseRotation();
      } else {
        tooltip.style.opacity = "0";
        tooltip.style.display = "none";
        resumeRotation();
      }
    };

    // üñ± –ö–ª—ñ–∫ ‚Äî –ø–æ–∫–∞–∑—É—î –∞–±–æ —Ö–æ–≤–∞—î infoBox
    const handleClick = (event: MouseEvent) => {
      clickedOnDotRef.current = false;

      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

      raycaster.setFromCamera(mouse, camera);
      const intersects = raycaster.intersectObjects(globe.children);

      if (intersects.length > 0) {
        const dot = intersects[0].object;
        clickedOnDotRef.current = true;

        console.log("Clicked dot data:", dot.userData);

        // ‚ùå –ü–æ–∫–∞–∑—É—î–º–æ infoBox
        infoBox.style.display = "block";
        infoBox.style.left = `${event.clientX}px`;
        infoBox.style.top = `${event.clientY}px`;
        infoBox.style.opacity = "1";
        infoBox.style.transform = "scale(1)";
        infoBox.style.transition = "opacity 0.5s ease, transform 0.3s ease";

        infoBox.innerHTML = `
  <div style="position:relative; padding:12px; max-width:280px;">
    <div id="infoBoxClose" style="position:absolute; top:8px; right:8px; cursor:pointer;">‚úñ</div>
    <div style="display:flex; align-items:center; gap:10px;">
      ${
        dot.userData.logo
          ? `<img src="${dot.userData.logo}" width="40" height="40" style="object-fit:contain;" />`
          : `<div style="width:40px; height:40px; background:#ccc; border-radius:4px;"></div>`
      }
      <div>
        <strong style="font-size:16px;">${
          dot.userData.name || "‚Äî"
        }</strong><br/>
        <span style="font-size:13px; color:#666;">${
          dot.userData.country || "–ö—Ä–∞—ó–Ω–∞ –Ω–µ–≤—ñ–¥–æ–º–∞"
        }</span>
      </div>
    </div>
    <p style="margin-top:10px; font-size:14px;">
      ${dot.userData.description || "<em>–û–ø–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π</em>"}
    </p>
    <div style="margin-top:10px; font-size:13px;">
      <strong>–¶—ñ–Ω–∞:</strong><br/>
      üîπ <strong>Last:</strong> ${dot.userData.last ?? "‚Äî"}<br/>
      üü¢ <strong>Buy:</strong> ${dot.userData.buy ?? "‚Äî"}<br/>
      üî¥ <strong>Sell:</strong> ${dot.userData.sell ?? "‚Äî"}
    </div>
    ${
      dot.userData.chart
        ? `<img src="${dot.userData.chart}" width="100%" style="margin-top:10px; border-radius:4px;" />`
        : ""
    }
  </div>
`;

        // ‚ùå –û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—ñ–∫–Ω–∞
        const closeIcon = document.getElementById("infoBoxClose");
        if (closeIcon) {
          closeIcon.addEventListener("click", () => {
            infoBox.style.opacity = "0";
            infoBox.style.transform = "scale(0.95)";
            setTimeout(() => {
              infoBox.style.display = "none";
              infoBox.innerHTML = "";
            }, 500);
          });
        }
      }

      // ‚ùå –ö–ª—ñ–∫ –ø–æ–∑–∞ —Ç–æ—á–∫–æ—é —ñ –ø–æ–∑–∞ –≤—ñ–∫–Ω–æ–º ‚Äî –∑–∞–∫—Ä–∏–≤–∞—î–º–æ
      if (!clickedOnDotRef.current && !infoBox.contains(event.target as Node)) {
        infoBox.style.opacity = "0";
        infoBox.style.transform = "scale(0.95)";
        setTimeout(() => {
          infoBox.style.display = "none";
          infoBox.innerHTML = "";
        }, 500);
      }
    };

    // üîÅ –ê–Ω—ñ–º–∞—Ü—ñ—è —Å—Ü–µ–Ω–∏
    const animate = () => {
      requestAnimationFrame(animate);
      if (!rotationPaused) globe.rotation.y += 0.001;
      controls.update();
      renderer.render(scene, camera);
    };
    animate();

    // üìå –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    window.addEventListener("mousemove", handleMouseMove);
    window.addEventListener("click", handleClick);

    // üßπ –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –¥–µ–º–æ–Ω—Ç–∞–∂—ñ
    return () => {
      window.removeEventListener("mousemove", handleMouseMove);
      window.removeEventListener("click", handleClick);
      mountNode.removeChild(renderer.domElement);
    };
  }, []);

  return (
    <>
      <div ref={mountRef} className="fullscreen" />
      <div id="tooltip"></div>
      <div id="infoBox"></div>
    </>
  );
};

export default GlobeScene;
